"0","library(glmnet)"
"2","package ‘glmnet’ was built under R version 4.0.4"
"2","Loading required package: Matrix
"
"2","Loaded glmnet 4.1-1
"
"0","  glmnetfit = glmnet(X, y, intercept = FALSE)"
"0","  lambda_all = glmnetfit$lambda"
"0","  "
"0","  myLasso_pathW <- function(X, y, lambda_all, tol = 1e-7, maxitr = 100){"
"0","  n = nrow(X)"
"0","  p = ncol(X)"
"0","  size_lambda = length(lambda_all)"
"0","  lambda_all = sort(lambda_all, decreasing = TRUE)"
"0","  beta_mat = matrix(NA, p, size_lambda)"
"0","  fist_beta = rep(0, p)"
"0","  second_beta = fist_beta"
"0","  for (l in 1:size_lambda){"
"0","  lambda = lambda_all[l]"
"0",""
"0","  for (k in 1:maxitr){"
"0","  fist_beta = second_beta"
"0","  r = y - X %*% fist_beta"
"0","  for (j in 1:p){"
"0","  r = r + X[, j] * second_beta[j]"
"0"," "
"0","  second_beta[j] <- soft_th( X[, j] %*% r / n, lambda)"
"0","  r = r - X[, j] * second_beta[j]"
"0","        }"
"0","  if (sum(abs(second_beta - fist_beta)) < tol) break;"
"0","            }"
"0","  beta_mat[, l] = second_beta"
"0","                }"
"0","  return(beta_mat)"
"0","  }"
"0","  "
"0","   # fit myLasso models"
"0","  myfit = myLasso_pathW(X, y, lambda_all)"
"0","   #Plot the models"
"0","  par(mfrow = c(1, 2))"
"0","  matplot(t(myfit[1:10, ]), type = ""l"", xlab = ""Value of Lambda"","
"0","  ylab = ""Estimated Beta Coefficient"", main = ""My Lasso"")"
